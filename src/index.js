import React from 'react'
import { render } from 'react-snapshot'
import App from './views/App'
import * as serviceWorker from './serviceWorker'

/**
 * Before the app renders, we need to check if we are hydrating an HTML page
 * generated by `react-snapshot`. If we are, we need to remove all jss generated
 * during the static build.
 *
 * If the build is a `react-snapshot` build, we need to monkey-patch the
 * `CSSStyleSheet.insertRule()` function used by `styled-components` in order to
 * keep track of the styles being inserted, so that we can add them as style tags
 * after render.
 *
 * @return {Object} The style artifacts of the build
 */
function beforeRender() {
  const ssrStyles = document.querySelectorAll('style[data-emotion]')

  const cssInserts = []
  if (navigator.userAgent.includes('Node.js')) {
    const insertRuleOriginal = CSSStyleSheet.prototype.insertRule
    CSSStyleSheet.prototype.insertRule = function(...args) {
      cssInserts.push(args)
      return insertRuleOriginal.apply(this, args)
    }
  }

  return { ssrStyles, cssInserts }
}

/**
 * After the app renders, we first need to register the service worker. We then
 * check to see if there were any SSR styles that need to be removed (since the
 * client would have rendered it's own jss style tags by now).
 *
 * If any CSS rules were inserted during `react-snapshot` build, we need to add
 * them to a style tag and append it to the document head.
 *
 * After that, we should remove any script tags added by webpack during the
 * `react-snapshot` build. This would be any dynamic chunks that were loaded. The
 * reason we have to do this is because of the order they are injected by webpack.
 * They are injected to the end of the head, whereas the main js chunk is loaded
 * from the bottom of the body tag. This results in an error that states
 * `"webpackJsonp" is not defined` since that function is instantiated in the main
 * chunk and used by each dynamic chunk.
 */
function afterRender({ ssrStyles, cssInserts }) {
  if (ssrStyles.length) {
    ssrStyles.forEach(ssrStyle => ssrStyle.remove())
  }

  if (cssInserts.length) {
    const css = cssInserts
      .reverse()
      .map(i => i[0])
      .join('')
    const styles = document.createElement('style')
    styles.appendChild(document.createTextNode(css))
    styles.setAttribute('data-emotion', 'css')
    document.head.appendChild(styles)
  }
}

const cssArtifacts = beforeRender()
render(<App />, document.getElementById('root'))
afterRender(cssArtifacts)

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.register()
